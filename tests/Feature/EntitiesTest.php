<?php

namespace Tests\Feature;

use Corals\Modules\Entity\Models\Entity;
use Corals\User\Models\User;
use Illuminate\Foundation\Testing\DatabaseTransactions;
use Illuminate\Support\Facades\Auth;
use Tests\TestCase;

class EntitiesTest extends TestCase
{
    use DatabaseTransactions;

    protected $entity;

    protected function setUp(): void
    {
        parent::setUp(); // TODO: Change the autogenerated stub

        $user = User::query()->whereHas('roles', function ($query) {
            $query->where('name', 'superuser');
        })->first();
        Auth::loginUsingId($user->id);
    }

    public function test_entities_store()
    {
        $types = get_array_key_translation(config("settings.models.custom_field_setting.supported_types"));
        $type = array_rand($types);
        $code = uniqid('entity-');
        $response = $this->post(
            'entity/entities',
            [
                'code' => $code,
                'name_singular' => 'entity singular',
                'name_plural' => 'entities',
                'fields' => [
                    [
                        'name' => 'field name',
                        'type' => $type,
                        'status' => 'active',
                        "field_config" => [
                            "is_identifier" => "on",
                        ],
                        "label" => 'field',
                    ],
                ],
            ]
        );

        $this->entity = Entity::query()->where('code', $code)->first();

        $response->assertDontSee('The given data was invalid')
            ->assertRedirect('entity/entities');

        $this->assertDatabaseHas('entity_entities', [
            'code' => $this->entity->code,
            'name_singular' => $this->entity->name_singular,
            'name_plural' => $this->entity->name_plural,
        ]);
    }

    public function test_entities_show()
    {
        $this->test_entities_store();
        if ($this->entity) {
            $response = $this->get('entity/entities/' . $this->entity->hashed_id);

            $response->assertViewIs('Entity::entities.show')->assertStatus(200);
        }
        $this->assertTrue(true);
    }

    public function test_entities_edit()
    {
        $this->test_entities_store();
        if ($this->entity) {
            $response = $this->get('entity/entities/' . $this->entity->hashed_id . '/edit');

            $response->assertViewIs('Entity::entities.create_edit')->assertStatus(200);
        }
        $this->assertTrue(true);
    }

    public function test_entities_update()
    {
        $this->test_entities_store();

        if ($this->entity) {
            $response = $this->put('entity/entities/' . $this->entity->hashed_id, [
                'code' => $this->entity->code,
                'name_singular' => 'entity',
                'name_plural' => $this->entity->name_plural,
                'fields' => [
                    [
                        'name' => $this->entity->fields[0]['name'],
                        'type' => $this->entity->fields[0]['type'],
                        'status' => $this->entity->fields[0]['status'],
                        "field_config" => [
                            "is_identifier" => "on",
                        ],
                        "label" => $this->entity->fields[0]['label'],
                    ],
                ],
            ]);

            $response->assertRedirect('entity/entities');
            $this->assertDatabaseHas('entity_entities', [
                'code' => $this->entity->code,
                'name_singular' => 'entity',
                'name_plural' => $this->entity->name_plural,
            ]);
        }

        $this->assertTrue(true);
    }

    public function test_entities_delete()
    {
        $this->test_entities_store();

        if ($this->entity) {
            $response = $this->delete('entity/entities/' . $this->entity->hashed_id);

            $response->assertStatus(200)->assertSeeText('Entity has been deleted successfully.');

            $this->isSoftDeletableModel(Entity::class);
            $this->assertDatabaseMissing('entity_entities', [
                'code' => $this->entity->code,
                'name_singular' => $this->entity->name_singular,
                'name_plural' => $this->entity->name_plural,
            ]);
        }
        $this->assertTrue(true);
    }
}
